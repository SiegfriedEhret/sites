---
import { getCollection, type CollectionEntry } from "astro:content";
import { compareDates, formatDate } from "@packages/utils/date";
import Layout from "../../../layouts/Layout.astro";
import Responsive from "@packages/ui/Responsive.astro";
import SuperTitle from "@packages/ui/SuperTitle.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  const badidon = await getCollection("badidon");
  const items = [...posts, ...badidon];
  const allTags: string[] = items.flatMap((el) => el.data.tags ?? []);
  const tags: string[] = [...new Set(allTags)].filter((t) => !!t);

  return tags.map((t) => {
    return {
      params: { tag: t },
      props: {
        tag: t,
        posts: items
          .filter((el) => (el.data.tags ?? []).includes(t))
          .sort((a, b) => compareDates(a.data.date, b.data.date)),
      },
    };
  });
}

interface Props {
  tag: string;
  posts: (CollectionEntry<"posts"> | CollectionEntry<"badidon">)[];
}

const { tag, posts } = Astro.props;
---

<Layout>
  <article>
    <SuperTitle title={`Billets avec l'étiquette « ${tag} »`} />
    <Responsive>
      {
        posts.map((item) => (
          <div class="post">
            {(item as CollectionEntry<"badidon">).data.audioUrl ? (
              <a href={`/ied/badidon/${item.slug}`}>
                <span>🎙️</span>
                <span>{item.data.title}</span>
              </a>
            ) : (
              <a href={`/ied/${item.slug}`}>{item.data.title}</a>
            )}
            <time datetime={item.data.date.toISOString()}>
              {formatDate(item.data.date)}
            </time>
            <span>{item.data.description}</span>
          </div>
        ))
      }
    </Responsive>
  </article>
</Layout>

<style>
  .post {
    display: flex;
    flex-direction: column;
    margin-block: var(--babase);
  }

  a {
    display: inline-flex;
    gap: var(--base);
  }
</style>
