---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { getSlug, getTitle } from "../../lib/museum";
import Responsive from "@packages/ui/Responsive.astro";
import SuperTitle from "@packages/ui/SuperTitle.astro";
import slugify from "slugify";

const items = await getCollection("museum");

const artists = Array.from(new Set(items.map((i) => i.data.artistName))).sort();
---

<Layout title="/ [ehret.me]">
  <article>
    <SuperTitle title="Museum of Poorly Photographed Art" />
    <Responsive>
      <div class="tacos" x-data="{selected: 'all'}">
        <div class="filters">
          <button class="artists-all" @click="selected = 'all'">All</button>
          {
            artists.map((artist) => (
              <button
                class="artist-select"
                @click={`selected = '${slugify(artist)}'`}
              >
                {artist}
              </button>
            ))
          }
        </div>

        <div class="grid">
          {
            items.map((item) => (
              <a
                class="item"
                href={`/museum/${getSlug(item)}`}
                x-show={`['all', '${slugify(item.data.artistName)}'].includes(selected)`}
              >
                <figure>
                  <figcaption>{getTitle(item)}</figcaption>
                  <Image
                    src={item.data.images[0].image}
                    alt={getTitle(item)}
                    width={300}
                    quality="low"
                    decoding="async"
                    loading="lazy"
                  />
                </figure>
              </a>
            ))
          }
        </div>
      </div>
    </Responsive>
  </article>
</Layout>

<style>
  .tacos {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .filters {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--base);
  }

  .filters.show {
    display: flex;
  }

  .filters button {
    border-radius: 0;
    background-color: var(--lake-red);
    color: var(--wevet);
    border: 2px solid transparent;
  }

  .filters button:is(:active, :focus) {
    border-color: var(--wevet);
  }

  @media screen and (min-width: 34rem) {
    .tacos {
      grid-template-columns: 200px 1fr;
    }

    .filters {
      flex-direction: column;
    }

    .grid {
      --cols: 3;
    }

    @supports not (grid-template-rows: masonry) {
      .grid {
        column-count: var(--cols);
        gap: var(--base);
        width: 100%;
      }

      .grid > * {
        break-inside: avoid;
        margin-bottom: var(--base);
      }
    }

    @supports (grid-template-rows: masonry) {
      .grid {
        display: grid;
        grid-template-columns: repeat(var(--cols), 1fr);
        grid-template-rows: masonry;
        gap: var(--base);
      }
    }
  }

  @media screen and (min-width: 80rem) {
    .grid {
      --cols: 5;
    }
  }

  .item {
    display: block;
    break-inside: avoid;
  }

  figure {
    break-inside: avoid;
    margin: var(--base) auto;
    padding: 0;
  }

  figure img,
  figure figcaption {
    width: 100%;
    height: auto;
  }

  figcaption {
    background: var(--text);
    color: var(--back);
    padding: 2px 4px;
    font-size: 0.8rem;
  }
</style>
