---
import { contentfulClient } from "../../lib/contentful";
import Layout from "../../layouts/Layout.astro";
import { Art, getTitle } from "../../lib/art";
import slugify from "@sindresorhus/slugify";

const entries = await contentfulClient.getEntries<Art>({
  content_type: "art",
  limit: 50,
  order: "fields.date",
  select: "fields.name,fields.slug,fields.artist,fields.date,fields.media",
});

const posts = entries.items.map((item) => {
  const { name, slug, artist, date } = item.fields;
  return {
    name,
    slug,
    date,
    artist: artist.fields.name,
    media: item.fields.media.map((i) => i.fields.file.url),
  };
});
const artists = Array.from(new Set(posts.map((i) => i.artist))).sort();
---

<Layout title="/ [ehret.me]">
  <h1>Museum of Poorly Photographed Art</h1>

  <div class="tacos" x-data="{selected: 'all'}">
    <div class="filters">
      <button class="artists-all" @click="selected = 'all'">All</button>
      {
        artists.map((artist) => (
          <button
            class="artist-select"
            @click={`selected = '${slugify(artist)}'`}
          >
            {artist}
          </button>
        ))
      }
    </div>

    <div class="grid">
      {
        posts.map((item) => (
          <a
            class="item"
            href={`/museum/${item.slug}`}
            x-show={`['all', '${slugify(item.artist)}'].includes(selected)`}
          >
            <figure>
              <figcaption>{getTitle(item)}</figcaption>
              <img
                loading="lazy"
                src={`${item.media[0]}?fm=jpg&q=50&w=300`}
                alt={getTitle(item)}
              />
            </figure>
          </a>
        ))
      }
    </div>
  </div>
</Layout>

<style>
  .tacos {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .filters {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--base);
  }

  .filters.show {
    display: flex;
  }

  .filters button {
    border-radius: 0;
    background-color: var(--lake-red);
    color: var(--wevet);
    border: 2px solid transparent;
  }

  .filters button:is(:active, :focus) {
    border-color: var(--wevet);
  }

  @media screen and (min-width: 40rem) {
    .tacos {
      grid-template-columns: 200px 1fr;
    }

    .filters {
      flex-direction: column;
    }

    .grid {
      --cols: 3;
    }

    @supports not (grid-template-rows: masonry) {
      .grid {
        column-count: var(--cols);
        gap: 16px;
        width: 100%;
      }

      .grid > * {
        break-inside: avoid;
        margin-bottom: 16px;
      }
    }

    @supports (grid-template-rows: masonry) {
      .grid {
        display: grid;
        grid-template-columns: repeat(var(--cols), 1fr);
        grid-template-rows: masonry;
        gap: 16px;
      }
    }
  }

  @media screen and (min-width: 80rem) {
    .grid {
      --cols: 5;
    }
  }

  .item {
    display: block;
    break-inside: avoid;
  }

  figure {
    break-inside: avoid;
    margin: 16px auto;
    padding: 0;
  }

  figure img,
  figure figcaption {
    width: 100%;
  }

  figcaption {
    background: var(--text);
    color: var(--back);
    padding: 2px 4px;
    font-size: 0.6rem;
  }
</style>
